<?php
/**
 * @file
 * Tests for the Layout module.
 */
require_once BACKDROP_ROOT . '/core/modules/simpletest/tests/upgrade/upgrade.test';

/**
 * Tests the interface for adding, removing, and moving blocks.
 */
class LayoutInterfaceTest extends BackdropWebTestCase {
  protected $admin_user;
  protected $web_user;

  function setUp() {
    parent::setUp('layout_test');

    // Create and login admin user.
    $this->admin_user = $this->backdropCreateUser(array(
      'access administration pages',
      'administer site configuration',
      'administer modules',
      'administer layouts',
      'administer nodes',
    ));
    $this->backdropLogin($this->admin_user);

    // Create a web user.
    $this->web_user = $this->backdropCreateUser(array('access user profiles', 'access content'));

    $this->test_node1 = $this->backdropCreateNode(array(
      'type' => 'article',
      'title' => $this->randomString(),
    ));
    $this->test_node2 = $this->backdropCreateNode(array(
      'type' => 'page',
      'title' => $this->randomString(),
    ));
  }

  /**
   * Add and remove blocks from a custom layout path.
   */
  function testBlockBasics() {
    $this->backdropGet('admin/structure/layouts');
    $this->clickLink(t('Add new layout'));

    // Create a new layout at a new path.
    $layout_name = strtolower($this->randomName());
    $layout_title = $this->randomName();
    $layout_url = 'layout-test-path';
    $edit = array(
      'title' => $layout_title,
      'name' => $layout_name,
      'layout' => 'two_column',
      'path' => $layout_url,
    );
    $this->backdropPost(NULL, $edit, t('Create layout'));

    // We should be taken to the layout content page next.
    $this->assertText(t('Layout created. Blocks may now be added to this layout.'));

    // Check that a block that requires contexts is not shown.
    $this->assertNoLink(t('Main page content'));
    $this->assertNoLink(t('Layout bar block'));

    // Add a block to the sidebar.
    $this->clickLink(t('Add block'), 3);
    $this->assertText(t('A testing block for layouts.'));
    $this->clickLink(t('Layout foo block'));
    $edit = array(
      'block_settings[count]' => 5,
    );
    $this->backdropPost(NULL, $edit, t('Add block'));

    // Record the UUID for the newly added block.
    $last_block = $this->xpath('(//*[@id=:region]//*[@data-block-id])[last()]', array(
      ':region' => 'sidebar',
      ':block' => 'layout-editor-block',
    ));
    $block_uuid = (string) $last_block[0]['data-block-id'];
    $block_edit_url = 'admin/structure/layouts/manage/' . $layout_name . '/configure-block/editor/' . $block_uuid;

    // Save the layout.
    $this->backdropPost(NULL, array(), t('Save layout'));

    // Check that the layout is in the listing of layouts.
    $this->backdropGet('admin/structure/layouts');
    $this->assertText($layout_title);

    // Go to the the layout path and confirm the block exists, has the right
    // setting, and is the right place.
    $this->backdropGet($layout_url);
    $this->assertText('Foo subject');
    $this->assertText(format_string('The setting of count is @setting.', array('@setting' => 5)));
    $elements = $this->xpath('//*[@id=:region]//*[contains(@class,:block)]', array(
      ':region' => 'sidebar',
      ':block' => 'block-layout-test-foo',
    ));
    $this->assertEqual(count($elements), 1, 'The sample block was found in the sidebar.');

    // Try updating the block title to use a custom string.
    $block_new_title = $this->randomName();
    $edit = array(
      'title_display' => LAYOUT_TITLE_CUSTOM,
      'title' => $block_new_title,
    );
    $this->backdropPost($block_edit_url, $edit, t('Save configuration'));
    $this->backdropPost(NULL, array(), t('Save layout'));
    $this->backdropGet($layout_url);
    $this->assertText($block_new_title);

    // Set the block title to nothing.
    $edit = array(
      'title_display' => LAYOUT_TITLE_NONE,
    );
    $this->backdropPost($block_edit_url, $edit, t('Save configuration'));
    $this->backdropPost(NULL, array(), t('Save layout'));
    $this->backdropGet($layout_url);
    $this->assertNoText('Foo subject');
    $this->assertNoText($block_new_title);

    // Set the block title back to normal and set a special block class.
    $custom_class = $this->randomName();
    $edit = array(
      'title_display' => LAYOUT_TITLE_DEFAULT,
      'style_settings[classes]' => $custom_class,
    );
    $this->backdropPost($block_edit_url, $edit, t('Save configuration'));
    $this->backdropPost(NULL, array(), t('Save layout'));

    $this->backdropGet($layout_url);
    $this->assertText('Foo subject');
    $this->assertNoText($block_new_title);
    $block_element = $this->xpath('(//*[@id=:region]//*[contains(@class,:block)])[contains(@class,:custom-class)]', array(
      ':region' => 'sidebar',
      ':block' => 'block-layout-test-foo',
      ':custom-class' => $custom_class,
    ));
    $this->assertEqual(count($block_element), 1, 'The sample block was found in the sidebar.');

    // Use the dynamic block style. Save once to update the form (usually done
    // via AJAX) then, edit and save again with the dynamic settings.
    $title_class = $this->randomName();
    $content_class = $this->randomName();
    $edit = array(
      'style' => 'dynamic',
    );
    $this->backdropPost($block_edit_url, $edit, t('Save configuration'));
    $edit = array(
      'style_settings[wrapper_tag]' => 'aside',
      'style_settings[title_tag]' => 'h3',
      'style_settings[title_classes]' => $title_class,
      'style_settings[content_tag]' => 'p',
      'style_settings[content_classes]' => $content_class,
    );
    $this->backdropPost($block_edit_url, $edit, t('Save configuration'));
    $this->backdropPost(NULL, array(), t('Save layout'));

    $this->backdropGet($layout_url);
    $block_element = $this->xpath('(//*[@id=:region]//aside[contains(@class,:block)])[contains(@class,:custom-class)]', array(
      ':region' => 'sidebar',
      ':block' => 'block-layout-test-foo',
      ':custom-class' => $custom_class,
    ));
    $this->assertEqual(count($block_element), 1, 'The sample block was found in the sidebar as an aside tag.');
    if ($block_element) {
      $title_element = $block_element[0]->xpath('h3');
      $content_element = $block_element[0]->xpath('p');
      $this->assertEqual(count($title_element), 1, 'The sample block has the correct H3 heading tag.');
      $this->assertEqual(count($content_element), 1, 'The sample block has the correct P content tag.');
      $this->assertEqual($title_element[0]['class'], $title_class, 'The sample block title has the correct class.');
      $this->assertEqual($content_element[0]['class'], $content_class, 'The sample block content has the correct class.');
    }

    // Try moving the block to a different position within the layout.
    $edit = array(
      'content[positions][content]' => $block_uuid,
      'content[positions][sidebar]' => '',
    );
    $this->backdropPost('admin/structure/layouts/manage/' . $layout_name, $edit, t('Save layout'));
    $this->backdropGet($layout_url);
    $block_element = $this->xpath('//*[@id=:region]//*[contains(@class,:block)]', array(
      ':region' => 'content',
      ':block' => 'block-layout-test-foo',
    ));
    $this->assertEqual(count($block_element), 1, 'The sample block was found in the content area after moving it from the sidebar.');

    // Move the block via the block configuration form.
    $edit = array(
      'region' => 'footer',
    );
    $this->backdropPost($block_edit_url, $edit, t('Save configuration'));
    $this->backdropPost(NULL, array(), t('Save layout'));

    $this->backdropGet($layout_url);
    $block_element = $this->xpath('(//*[@id=:region]//*[contains(@class,:block)])', array(
      ':region' => 'footer',
      ':block' => 'block-layout-test-foo',
    ));
    $this->assertEqual(count($block_element), 1, 'The sample block was found in the footer after moving via block form.');

    // Try moving the block into the sidebar again via the API.
    backdrop_static_reset();
    $layout = layout_load($layout_name);
    $layout->setBlockPosition($block_uuid, 'sidebar');
    $layout->save();

    $this->backdropGet($layout_url);
    $block_element = $this->xpath('(//*[@id=:region]//*[contains(@class,:block)])', array(
      ':region' => 'sidebar',
      ':block' => 'block-layout-test-foo',
    ));
    $this->assertEqual(count($block_element), 1, 'The sample block was found in the sidebar after moving via the API.');

    // With all the manipulations we've performed, make sure that the block is
    // still only shown once, and did not end up in multiple regions on the page
    // by accident.
    $block_element = $this->xpath('//*[contains(@class,:block)]', array(
      ':region' => 'content',
      ':block' => 'block-layout-test-foo',
    ));
    $this->assertEqual(count($block_element), 1, 'The sample block is only displayed once after moving it.');

    // Finally, try removing the block.
    $this->backdropGet('admin/structure/layouts/manage/' . $layout_name);
    $remove_link = $this->xpath('//*[@data-block-id=:uuid]//a[contains(@class,"remove-block")]', array(
      ':uuid' => $block_uuid,
    ));
    $remove_url_parts = backdrop_parse_url($remove_link[0]['href']);
    $this->backdropGet($remove_url_parts['path'], $remove_url_parts);
    $this->backdropPost(NULL, array(), t('Save layout'));

    $this->backdropGet($layout_url);
    $this->assertNoText('Foo subject');
    $block_element = $this->xpath('//*[contains(@class,:block)]', array(
      ':region' => 'content',
      ':block' => 'block-layout-test-foo',
    ));
    $this->assertEqual(count($block_element), 0, 'The sample block has been removed.');
  }

  /**
   * Test the support for contexts within conditions and blocks.
   */
  function testContexts() {
    // Make a new layout that creates a custom path with wildcards.
    $layout_name = strtolower($this->randomName());
    $layout_title = $this->randomName();
    $layout_path = 'node/%/foo/%';
    $edit = array(
      'title' => $layout_title,
      'name' => $layout_name,
      'layout' => 'two_column',
      'path' => $layout_path,
    );
    // Check the path first to populate available contexts.
    $this->backdropPost('admin/structure/layouts/add', $edit, t('Check path'));

    // The first context (node) should be auto-detected and not require a value.
    $edit = array(
      'context[required][3][plugin]' => 'user',
    );
    $this->backdropPost('admin/structure/layouts/add', $edit, t('Create layout'));

    // Add the test block that requires both node and user contexts.
    $this->clickLink(t('Add block'), 2);
    $this->assertText(t('A testing block for layouts with contexts.'));
    $this->clickLink(t('Layout bar block'));

    $this->assertNoField('contexts[my_node]', 'Node context selector not shown, only a single option.');
    $this->assertField('contexts[my_user]', 'User context selector is shown.');
    $this->backdropPost(NULL, array(), t('Add block'));

    // Record the UUID for the newly added block.
    $last_block = $this->xpath('(//*[@id="layout-content-form"]//*[@id=:region]//*[@data-block-id])[last()]', array(
      ':region' => 'content',
      ':block' => 'layout-editor-block',
    ));
    $block_uuid = (string) $last_block[0]['data-block-id'];
    $block_edit_url = 'admin/structure/layouts/manage/' . $layout_name . '/configure-block/editor/' . $block_uuid;

    $this->backdropPost(NULL, array(), t('Save layout'));

    $this->backdropGet('node/' . $this->test_node1->nid . '/foo/' . $this->web_user->uid);
    $this->assertText(format_string('The user name is @name and the node title is @title', array('@name' => $this->web_user->name, '@title' => $this->test_node1->title)));

    // Modify the layout path to remove "node/", removing the auto-selection.
    $edit = array(
      'path' => 'foo/%/bar/%',
    );
    $this->backdropPost('admin/structure/layouts/manage/' . $layout_name . '/settings', $edit, t('Check path'));
    $edit = array(
      'context[required][1][plugin]' => 'node',
    );
    $this->backdropPost(NULL, $edit, t('Save settings'));

    // Check that the block still works, even with the contexts changed.
    $this->backdropGet('foo/' . $this->test_node1->nid . '/bar/' . $this->web_user->uid);
    $this->assertText(format_string('The user name is @name and the node title is @title', array('@name' => $this->web_user->name, '@title' => $this->test_node1->title)));

    // Change the second context to be a node context. The user context should
    // still work, as it will use the current user context.
    $edit = array(
      'context[required][3][plugin]' => 'node',
    );
    $this->backdropPost('admin/structure/layouts/manage/' . $layout_name . '/settings', $edit, t('Save settings'));
    $this->backdropPost(NULL, array(), t('Save settings'));

    // Now the page should show the current user instead of the one in the URL.
    $this->backdropGet('foo/' . $this->test_node1->nid . '/bar/' . $this->test_node2->nid);
    $this->assertText(format_string('The user name is @name and the node title is @title', array('@name' => $this->admin_user->name, '@title' => $this->test_node1->title)));

    // Change the "my_node" context to use the argument in position 3 instead
    // of position 1.
    $this->backdropGet($block_edit_url);
    $this->assertField('contexts[my_node]', 'Node context selector is shown.');
    $this->assertNoField('contexts[my_user]', 'User context selector is not shown, only the current user available.');

    $edit = array(
      'contexts[my_node]' => '3',
    );
    $this->backdropPost(NULL, $edit, t('Save configuration'));
    $this->backdropPost(NULL, array(), t('Save layout'));

    // Now the second node should be used as the title in the page.
    $this->backdropGet('foo/' . $this->test_node1->nid .  '/bar/' . $this->test_node2->nid);
    $this->assertText(format_string('The user name is @name and the node title is @title', array('@name' => $this->admin_user->name, '@title' => $this->test_node2->title)));


  }
}

/**
 * Tests the upgrade path from block-based regions to layouts.
 */
class LayoutUpgradePathTest extends UpgradePathTestCase {

}